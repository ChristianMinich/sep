/*const OrderService = require('./orderService');

// Create mock objects for database and addressService
const mockDatabase = {
  insertOrder: jest.fn(),
  // Define other mock methods used by OrderService
};

const mockAddressService = {
  getZipID: jest.fn(),
  // Define other mock methods used by OrderService
};

// Create an instance of OrderService with mock objects
const orderService = new OrderService(mockDatabase, mockAddressService);

describe('OrderService', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('addOrder', () => {
    it('should add an order successfully', async () => {
      // Define your input order data
      const orderData = {
        // Define your order data here
      };

      // Mock the behavior of mockDatabase.insertOrder
      mockDatabase.insertOrder.mockResolvedValue(true);

      const result = await orderService.addOrder(orderData);

      // Assert that the mock methods were called as expected
      expect(mockDatabase.insertOrder).toHaveBeenCalledWith(/* Define your expected arguments here */);

      // Assert the result
      expect(result).toEqual(/* Define your expected result here */);
    });

    // Add more test cases for different scenarios
  });

  describe('getAllOrdersOfStore', () => {
    it('should retrieve all orders of a store', async () => {
      // Define your input storeID
      const storeID = /* Define your store ID here */;

      // Mock the behavior of mockDatabase.selectAllOrdersOfStore
      mockDatabase.selectAllOrdersOfStore.mockResolvedValue(/* Define your expected result here */);

      const result = await orderService.getAllOrdersOfStore(storeID);

      // Assert that the mock methods were called as expected
      expect(mockDatabase.selectAllOrdersOfStore).toHaveBeenCalledWith(/* Define your expected arguments here */);

      // Assert the result
      expect(result).toEqual(/* Define your expected result here */);
    });

    // Add more test cases for different scenarios
  });

  // Add test cases for other methods in OrderService
});
*/
